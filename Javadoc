package dd;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

/**
 * GPA 계산기를 제공하는 클래스입니다. 사용자가 입력한 과목명, 학점, 성적을 바탕으로
 * GPA를 계산하고 결과를 출력하며, 계산된 결과를 파일에 저장할 수 있습니다.
 */
public class GPA_Calculator extends JFrame {
    private JTextField subjectField, creditField, gradeField;
    private JTextArea resultArea;
    private JComboBox<String> semesterComboBox;
    private final ArrayList<Integer> credits = new ArrayList<>();
    private final ArrayList<Double> grades = new ArrayList<>();
    private double calculatedGrade = 0.0;

    /**
     * GPA_Calculator 생성자. JFrame을 설정하고 UI 구성 요소를 초기화합니다.
     */
    public GPA_Calculator() {
        // 창 설정
        setTitle("간단 학점 계산기");
        setSize(600, 600); // 창 가로 크기 600으로 늘림
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        setLocationRelativeTo(null); // 화면 중앙에 위치

        // 메뉴바 추가
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("메뉴");
        menuBar.add(menu);
        setJMenuBar(menuBar);

        // 전체 패널 설정
        JPanel mainPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                // 그라데이션 효과 적용
                Graphics2D g2d = (Graphics2D) g;
                GradientPaint gp = new GradientPaint(0, 0, new Color(255, 204, 229), 0, getHeight(), new Color(204, 229, 255));
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        mainPanel.setLayout(new BorderLayout());

        // 입력 패널 생성
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridBagLayout());
        inputPanel.setBackground(new Color(255, 255, 255)); // 입력 패널 배경색
        inputPanel.setBorder(BorderFactory.createTitledBorder("정보 입력"));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 10, 10);

        // 학기 선택
        gbc.gridx = 0;
        gbc.gridy = 0;
        inputPanel.add(new JLabel("학기 선택:"), gbc);
        String[] semesters = {"1학기", "2학기", "여름학기", "겨울학기"};
        semesterComboBox = new JComboBox<>(semesters);
        gbc.gridx = 1;
        inputPanel.add(semesterComboBox, gbc);

        // 과목명
        gbc.gridx = 0;
        gbc.gridy = 1;
        inputPanel.add(new JLabel("과목명:"), gbc);
        subjectField = new JTextField(15);
        gbc.gridx = 1;
        inputPanel.add(subjectField, gbc);

        // 학점
        gbc.gridx = 0;
        gbc.gridy = 2;
        inputPanel.add(new JLabel("학점:"), gbc);
        creditField = new JTextField(15);
        gbc.gridx = 1;
        inputPanel.add(creditField, gbc);

        // 성적
        gbc.gridx = 0;
        gbc.gridy = 3;
        inputPanel.add(new JLabel("성적 (A/B/C/D/F):"), gbc);
        gradeField = new JTextField(15);
        gbc.gridx = 1;
        inputPanel.add(gradeField, gbc);

        // 버튼 패널
        JPanel buttonPanel = new JPanel();
        buttonPanel.setBackground(new Color(255, 255, 255)); // 버튼 패널 배경색
        JButton addButton = new JButton("추가");
        JButton calculateButton = new JButton("계산");
        JButton saveButton = new JButton("저장");
        JButton clearButton = new JButton("지우기");  // 지우기 버튼 추가
        styleButton(addButton);  // 버튼 스타일 설정
        styleButton(calculateButton);  // 버튼 스타일 설정
        styleButton(saveButton);  // 버튼 스타일 설정
        styleButton(clearButton);  // 버튼 스타일 설정
        buttonPanel.add(addButton);
        buttonPanel.add(calculateButton);
        buttonPanel.add(saveButton);
        buttonPanel.add(clearButton);  // 지우기 버튼 추가

        // 입력 패널과 버튼 패널 추가
        mainPanel.add(inputPanel, BorderLayout.NORTH);
        mainPanel.add(buttonPanel, BorderLayout.CENTER);

        // 결과 영역
        resultArea = new JTextArea();
        resultArea.setEditable(false);
        resultArea.setLineWrap(true);
        resultArea.setWrapStyleWord(true);
        resultArea.setBackground(new Color(240, 240, 255)); // 결과 영역 배경색
        resultArea.setBorder(BorderFactory.createTitledBorder("결과"));
        JScrollPane resultScrollPane = new JScrollPane(resultArea);
        resultScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        resultScrollPane.setPreferredSize(new Dimension(600, 300)); // 결과 영역 높이 설정

        // 결과 영역을 빈 공간에 추가
        mainPanel.add(resultScrollPane, BorderLayout.SOUTH);

        // 버튼 기능 추가
        addButton.addActionListener(e -> addEntry());
        calculateButton.addActionListener(e -> calculateGPA());
        saveButton.addActionListener(e -> saveResults());
        clearButton.addActionListener(e -> clearResults());  // 지우기 버튼 기능 추가

        add(mainPanel, BorderLayout.CENTER);
        setVisible(true);
    }

    /**
     * 버튼의 스타일을 설정합니다. 버튼의 배경색, 글자색, 테두리 등을 설정합니다.
     *
     * @param button 스타일을 설정할 버튼
     */
    private void styleButton(JButton button) {
        button.setBackground(new Color(100, 149, 237)); // 버튼 배경색
        button.setForeground(Color.WHITE); // 버튼 글자색
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2)); // 기본 테두리
        button.setFont(new Font("Noto Sans", Font.BOLD, 14)); // 한글 지원이 좋은 폰트 사용
        button.setPreferredSize(new Dimension(80, 35));  // 버튼 크기 조정
        Border roundedBorder = BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.GRAY, 2),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)
        );
        button.setBorder(roundedBorder);
        button.setContentAreaFilled(true); // 버튼 배경을 채움
        button.setOpaque(true); // 버튼을 불투명하게 설정
        button.setCursor(new Cursor(Cursor.HAND_CURSOR)); // 마우스 커서 변경
    }

    /**
     * 성적을 점수로 변환합니다. A는 4.0, B는 3.0, C는 2.0, D는 1.0, F는 0.0입니다.
     *
     * @param grade 성적 (A, B, C, D, F 중 하나)
     * @return 변환된 점수
     */
    private double convertGradeToPoint(String grade) {
        switch (grade) {
            case "A":
                return 4.0;
            case "B":
                return 3.0;
            case "C":
                return 2.0;
            case "D":
                return 1.0;
            case "F":
                return 0.0;
            default:
                return -1.0;
        }
    }

    /**
     * GPA를 계산합니다. 사용자가 입력한 과목들의 학점과 성적을 바탕으로 GPA를 계산합니다.
     */
    private void calculateGPA() {
        if (credits.isEmpty() || grades.isEmpty()) {
            showError("입력된 과목이 없습니다.");
            return;
        }

        double totalCredits = 0;
        double totalGradePoints = 0;

        for (int i = 0; i < credits.size(); i++) {
            totalCredits += credits.get(i);
            totalGradePoints += credits.get(i) * grades.get(i);
        }

        double gpa = totalGradePoints / totalCredits;
        resultArea.append("전체 평균 학점: " + String.format("%.2f", gpa) + "\n");
    }

    /**
     * 입력된 과목명, 학점, 성적 정보를 리스트에 추가합니다.
     */
    private void addEntry() {
        try {
            int credit = Integer.parseInt(creditField.getText().trim());
            double grade = convertGradeToPoint(gradeField.getText().trim().toUpperCase());

            if (grade < 0) {
                showError("유효하지 않은 성적입니다. A, B, C, D, F만 입력하세요.");
                return;
            }

            credits.add(credit);
            grades.add(grade);
            resultArea.append(String.format("학기: %s, 과목: %s, 학점: %d, 성적: %.1f\n",
                    semesterComboBox.getSelectedItem(), subjectField.getText().trim(), credit, grade));

            clearFields();
        } catch (NumberFormatException e) {
            showError("학점은 숫자로 입력하세요.");
        }
    }

    /**
     * 오류 메시지를 팝업으로 표시합니다.
     *
     * @param message 오류 메시지
     */
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "오류", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * 입력 필드를 초기화합니다.
     */
    private void clearFields() {
        subjectField.setText("");
        creditField.setText("");
        gradeField.setText("");
    }

    /**
     * 계산된 결과를 텍스트 파일에 저장합니다.
     */
    private void saveResults() {
        try (FileWriter writer = new FileWriter("gpa_results.txt", true)) {
            writer.write(resultArea.getText());
            JOptionPane.showMessageDialog(this, "결과가 저장되었습니다.");
        } catch (IOException e) {
            showError("결과 저장 실패!");
        }
    }

    /**
     * 결과를 초기화합니다.
     */
    private void clearResults() {
        credits.clear();
        grades.clear();
        resultArea.setText("");
    }

    /**
     * 애플리케이션을 실행합니다.
     *
     * @param args 실행 시 인수
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(GPA_Calculator::new);
    }
}
